image: docker:stable

variables:
   # When using dind service we need to instruct docker, to talk with the
   # daemon started inside of the service. The daemon is available with
   # a network connection instead of the default /var/run/docker.sock socket.
   #
   # The 'docker' hostname is the alias of the service container as described at
   # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
   #
   # Note that if you're using the Kubernetes executor, the variable should be set to
   # tcp://localhost:2375/ because of how the Kubernetes executor connects services
   # to the job container
   # DOCKER_HOST: tcp://localhost:2375/
   #
   # For non-Kubernetes executors, we use tcp://docker:2375/
   DOCKER_HOST: tcp://docker:2375/
   # When using dind, it's wise to use the overlayfs driver for
   # improved performance.
   DOCKER_DRIVER: overlay2
   
   # Since the docker:dind container and the runner container don’t share their root
   # filesystem, the job’s working directory can be used as a mount point for children
   # containers. For example, if you have files you want to share with a child container,
   # you may create a subdirectory under /builds/$CI_PROJECT_PATH and use it as your
   # mount point.
   MOUNT_POINT: /builds/$CI_PROJECT_PATH/mnt

services:
   - docker:dind

# Use this command to look at your docker environment
# Note: This step can be overwritten by before_script sections in specific jobs.
#
#before_script:
#   - docker info


stages:
   - download
   - formatting
   - validate
   - build
   - test


#
# Data download stage
#



HGNC_data:
    stage: download
    before_script:
        - apk add --update curl && rm -rf /var/cache/apk/*
    script:
        #
        # The following is a useful command to list the environment variables
        #- export
        #
        
        # Establish a data directory
        - mkdir -p "$MOUNT_POINT"
        - cd "$MOUNT_POINT"
        
        # Fetch data files for the service
        
        # HGNC_data
        - curl -sSLN -O ftp://ftp.ebi.ac.uk/pub/databases/genenames/new/tsv/alternative_loci_set.txt
        - curl -sSLN -O ftp://ftp.ebi.ac.uk/pub/databases/genenames/new/tsv/non_alt_loci_set.txt
        - curl -sSLN -O ftp://ftp.ebi.ac.uk/pub/databases/genenames/new/tsv/hgnc_complete_set.txt

         # HCOP_data
        - curl -sSLN -O ftp://ftp.ebi.ac.uk/pub/databases/genenames/hcop/human_mouse_hcop_fifteen_column.txt.gz && gunzip human_mouse_hcop_fifteen_column.txt.gz
    artifacts:
        paths:
            - "$MOUNT_POINT/"



MGI_data:
    stage: download
    before_script:
        - apk add --update curl && rm -rf /var/cache/apk/*
    script:
        # Establish a data directory
        - mkdir -p "$MOUNT_POINT"
        - cd "$MOUNT_POINT"
        
        # MGI Gene data
        - curl -sSLN -O http://www.informatics.jax.org/downloads/reports/MGI_Gene_Model_Coord.rpt
        # Remove the additional tab at the end of the file
        - sed 's/[[:space:]]*$//' MGI_Gene_Model_Coord.rpt > MGI_Gene_Model_Coord.rpt.tmp && mv MGI_Gene_Model_Coord.rpt.tmp MGI_Gene_Model_Coord.rpt

        # MGI_Mrk_List2_data
        - curl -sSLN -O http://www.informatics.jax.org/downloads/reports/MRK_List2.rpt

        # MGI_Strain_data
        - curl -sSLN -O http://www.informatics.jax.org/downloads/reports/MGI_Strain.rpt

        # MGI_Allele_data
        - curl -sSLN -O http://www.informatics.jax.org/downloads/reports/KOMP_Allele.rpt
        - curl -sSLN -O http://www.informatics.jax.org/downloads/reports/EUCOMM_Allele.rpt
        - curl -sSLN -O http://www.informatics.jax.org/downloads/reports/NorCOMM_Allele.rpt
        - curl -sSLN -O http://www.informatics.jax.org/downloads/reports/MGI_PhenotypicAllele.rpt

        # MGI_Disease_data
        - curl -sSLN -O http://www.informatics.jax.org/downloads/reports/MGI_DO.rpt

    artifacts:
        paths:
             - "$MOUNT_POINT/"



#
# Data formatting stage
#


Synonym-formatting:
    stage: formatting
    before_script:
        - apk add --update python3 && rm -rf /var/cache/apk/*
    script:
        # Extract the Human gene synonyms - this creates the file HGNC_synonyms.txt
        - python3 "$CI_PROJECT_DIR"/scripts/HGNCPreProcessor.py "$MOUNT_POINT"/alternative_loci_set.txt "$MOUNT_POINT"/non_alt_loci_set.txt

        # Extract the mouse gene synonyms - this creates the file Mrk_synonyms.txt
        - python3 "$CI_PROJECT_DIR"/scripts/MgiMrkPreProcessor.py "$MOUNT_POINT"/MRK_List2.rpt

    dependencies:
        - HGNC_data
        - MGI_data
    artifacts:
        paths:
            - "$MOUNT_POINT/"


MGI-formatting:
    stage: formatting
    before_script:
        # Install iconv
        # see: https://gist.github.com/guillemcanal/be3db96d3caa315b4e2b8259cab7d07e
        - apk add --update wget build-base autoconf re2c libtool && mkdir -p /opt && cd /opt && wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz && tar xzf libiconv-1.14.tar.gz && cd libiconv-1.14 && sed -i 's/_GL_WARN_ON_USE (gets, "gets is a security hole - use fgets instead");/#if HAVE_RAW_DECL_GETS\n_GL_WARN_ON_USE (gets, "gets is a security hole - use fgets instead");\n#endif/g' srclib/stdio.in.h && ./configure --prefix=/usr/local && make && make install && apk del wget build-base autoconf re2c libtool && rm /opt && rm -rf /var/cache/apk/* && rm -rf /usr/share/*

    script:
        - iconv -f ISO-8859-1 -t UTF-8//TRANSLIT "$MOUNT_POINT"/MGI_PhenotypicAllele.rpt > "$MOUNT_POINT"/MGI_PhenotypicAllele.rpt.test.txt
        - iconv -f ISO-8859-1 -t UTF-8//TRANSLIT "$MOUNT_POINT"/MGI_Strain.rpt > "$MOUNT_POINT"/MGI_Strain_test.rpt

    dependencies:
        - MGI_data
    artifacts:
        paths:
             - "$MOUNT_POINT/"




check_data:
    stage: validate
    script:
        # Check contents
        #  - will require additional tests to verify data download
        
        - cd "$CI_PROJECT_DIR"
        - ls -lsh "$MOUNT_POINT"
    dependencies:
        - Synonym-formatting
        - MGI-formatting
    artifacts:
        paths:
             - "$MOUNT_POINT/"

build_image:
    stage: build
    script:
        - docker build -t reference-db .
        - docker run -v "$MOUNT_POINT:/mnt" reference-db
    dependencies:
        - check_data