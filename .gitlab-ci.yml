image: docker:stable

variables:
   # When using dind service we need to instruct docker, to talk with the
   # daemon started inside of the service. The daemon is available with
   # a network connection instead of the default /var/run/docker.sock socket.
   #
   # The 'docker' hostname is the alias of the service container as described at
   # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
   #
   # Note that if you're using the Kubernetes executor, the variable should be set to
   # tcp://localhost:2375/ because of how the Kubernetes executor connects services
   # to the job container
   # DOCKER_HOST: tcp://localhost:2375/
   #
   # For non-Kubernetes executors, we use tcp://docker:2375/
   DOCKER_HOST: tcp://docker:2375/
   # When using dind, it's wise to use the overlayfs driver for
   # improved performance.
   DOCKER_DRIVER: overlay2
   
   # Since the docker:dind container and the runner container don’t share their root
   # filesystem, the job’s working directory can be used as a mount point for children
   # containers. For example, if you have files you want to share with a child container,
   # you may create a subdirectory under /builds/$CI_PROJECT_PATH and use it as your
   # mount point.
   MOUNT_POINT: /builds/$CI_PROJECT_PATH/mnt
   
   # For EBI you need to override the definition of CI_REGISTRY to remove the port number
   CI_REGISTRY: dockerhub.ebi.ac.uk
   CI_REGISTRY_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH

   #NOW: $(date '+%Y-%m-%d-%H-%M-%S')
   #NOW: $(date '+%Y-%m-%d')
   
   # To solve the issue with the Docker in Docker 19.03 service.
   # Logged as: GitLab.com CI jobs failing if using docker:stable-dind image
   # see: https://gitlab.com/gitlab-com/gl-infra/production/issues/982
   DOCKER_TLS_CERTDIR: ""

services:
   - docker:dind

# Use this command to look at your docker environment
# Note: This step can be overwritten by before_script sections in specific jobs.
#
#before_script:
#   - docker info


stages:
   - download
   - mgi-formatting
   - build
   - deploy-dev
   - deploy


#
# Data download stage
#



MGI_data:
    stage: download
    before_script:
        - apk add --update curl && rm -rf /var/cache/apk/*
    script:
        #
        # The following is a useful command to list the environment variables
        # - export
        #
        #- echo ${KUBE_URL}
        #- echo ${KUBE_TOKEN}
        #- echo ${KUBE_NAMESPACE}
        #- echo ${KUBE_CA_PEM_FILE}
        #- echo ${KUBE_CA_PEM}
        #- echo ${KUBECONFIG}
        #- echo ${KUBE_INGRESS_BASE_DOMAIN}
        #- exit 1

        # Establish a data directory
        - mkdir -p "$MOUNT_POINT"
        - cd "$MOUNT_POINT"

        # MGI_Strain_data
        - curl -sSLN -O http://www.informatics.jax.org/downloads/reports/MGI_Strain.rpt

        # MGI_Allele_data
        - curl -sSLN -O http://www.informatics.jax.org/downloads/reports/KOMP_Allele.rpt
        - curl -sSLN -O http://www.informatics.jax.org/downloads/reports/EUCOMM_Allele.rpt
        - curl -sSLN -O http://www.informatics.jax.org/downloads/reports/NorCOMM_Allele.rpt
        - curl -sSLN -O http://www.informatics.jax.org/downloads/reports/MGI_PhenotypicAllele.rpt

        # MGI_Disease_data
        - curl -sSLN -O http://www.informatics.jax.org/downloads/reports/MGI_DO.rpt

    artifacts:
        paths:
             - "$MOUNT_POINT/"




orthology_db_dump:
    stage: download
    before_script:
        - apk add --update --no-cache curl
    script:
        
        # Establish a data directory
        - mkdir -p "$MOUNT_POINT"
        - cd "$MOUNT_POINT"
        
        - source "$CI_PROJECT_DIR"/scripts/orthologydb_dump.sh
        - cp "$CI_PROJECT_DIR"/schema/refdata_schema_additions.sql .
        
        
    artifacts:
        paths:
            - "$MOUNT_POINT/"



MGI-formatting:
    stage: mgi-formatting
    before_script:
        # Install iconv
        # see: https://gist.github.com/guillemcanal/be3db96d3caa315b4e2b8259cab7d07e
        - apk add --update wget build-base autoconf re2c libtool && mkdir -p /opt && cd /opt && wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz && tar xzf libiconv-1.14.tar.gz && cd libiconv-1.14 && sed -i 's/_GL_WARN_ON_USE (gets, "gets is a security hole - use fgets instead");/#if HAVE_RAW_DECL_GETS\n_GL_WARN_ON_USE (gets, "gets is a security hole - use fgets instead");\n#endif/g' srclib/stdio.in.h && ./configure --prefix=/usr/local && make && make install && apk del wget build-base autoconf re2c libtool && rm /opt && rm -rf /var/cache/apk/* && rm -rf /usr/share/*

    script:
        - iconv -f ISO-8859-1 -t UTF-8//TRANSLIT "$MOUNT_POINT"/MGI_PhenotypicAllele.rpt > "$MOUNT_POINT"/MGI_PhenotypicAllele.rpt.test.txt
        - iconv -f ISO-8859-1 -t UTF-8//TRANSLIT "$MOUNT_POINT"/MGI_Strain.rpt > "$MOUNT_POINT"/MGI_Strain_test.rpt

    dependencies:
        - MGI_data
        - orthology_db_dump
    artifacts:
        paths:
             - "$MOUNT_POINT/"



build_image:
    stage: build
    before_script:
    #    - apk add --update curl && rm -rf /var/cache/apk/*
    #    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" ${CI_REGISTRY}
        #- docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
        - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin  ${CI_REGISTRY}
        - NOW=$(date '+%Y-%m-%d-%H-%M-%S')
        - echo "export NOW=${NOW}" > ${MOUNT_POINT}/datetime.env
    script:
        # - mkdir -p data
        # - export LAST_JOB_ID=$(cat "$MOUNT_POINT"/check_data_job_id.txt)
        # - cd data
        # THIS does not work - instead finish with download in the URL and add login credentials
        # - curl -sSLN -O ${CI_PROJECT_URL}/-/jobs/${LAST_JOB_ID}/artifacts/download/artifacts.zip
        # - unzip artifacts.zip
        # - rm artifacts.zip
        # - rm check_data_job_id.txt
        # - cd "$CI_PROJECT_DIR"
        # - ls -lsh data
        # - exit
        # - cp  data/
        # - ls -lsh data
        - source ${MOUNT_POINT}/datetime.env
        - echo ${NOW}
        - docker build -t reference-db .  | tee ${MOUNT_POINT}/build.log
        # - docker run --name refdb-container reference-db
        - docker run --name refdbcontainer -v "$MOUNT_POINT:/mnt" -d reference-db

        # Time is required to load the data
        #
        # This is potential problem as the time taken to complete the data load cannot be established
        # Hence the long pause period. 
        #
        # An alternative would be to copy the data required into to the image
        # when it is built, but this is not trivial in this build system, and a downside  would be
        # that every time the container starts there would always be a lag while the data was loaded.
        #
        - sleep "${DB_LOAD_TIME}"

        - docker exec refdbcontainer sh /usr/local/data/postgres_processing_time.sh
        - docker exec refdbcontainer sh -c "rm -r /usr/local/data"

        - echo "${CI_REGISTRY_IMAGE}":"${NOW}"

        - docker commit refdbcontainer "${CI_REGISTRY_IMAGE}":"${NOW}"
        - docker tag "${CI_REGISTRY_IMAGE}":"${NOW}" "${CI_REGISTRY_IMAGE}":latest
        - docker push "${CI_REGISTRY_IMAGE}"  | tee ${MOUNT_POINT}/push.log

        - docker logout ${CI_REGISTRY}

        # PUSH THE IMAGE TO DOCKERHUB
        - echo "${DOCKER_HUB_PWD}" | docker login -u "${DOCKER_HUB_USER}" --password-stdin
 
        - docker tag "${CI_REGISTRY_IMAGE}":"${NOW}" "${DOCKER_HUB_USER}"/"${DOCKER_HUB_REPO}":"${NOW}"
        - docker tag "${CI_REGISTRY_IMAGE}":"${NOW}" "${DOCKER_HUB_USER}"/"${DOCKER_HUB_REPO}":latest
        - docker push "${DOCKER_HUB_USER}"/"${DOCKER_HUB_REPO}"  | tee ${MOUNT_POINT}/dockerhub-push-latest.log

        - docker logout       

    dependencies:
        - MGI-formatting
    artifacts:
        name: "database-${CI_JOB_ID}"
        paths:
            - ${MOUNT_POINT}

deploy-dev:
  stage: deploy-dev
  image: dtzar/helm-kubectl:2.13.0
  script:
    - source ${MOUNT_POINT}/datetime.env
    - echo ${NOW}
    #
    - kubectl config set-cluster local --server="${KUBERNETES_ENDPOINT}"
    - kubectl config set clusters.local.certificate-authority-data "${KUBERNETES_CERTIFICATE_AUTHORITY_DATA}"
    - kubectl config set-credentials ${KUBERNETES_DEV_USER} --token="${KUBERNETES_DEV_USER_TOKEN}"
    - kubectl config set-context "${KUBERNETES_DEV_NAMESPACE}" --cluster=local --user=${KUBERNETES_DEV_USER} --namespace="${KUBERNETES_DEV_NAMESPACE}"
    - kubectl config use-context "${KUBERNETES_DEV_NAMESPACE}"
    - kubectl version
    #
    - sed -i "s/latest/${NOW}/g" kube/dev/database/refdata-database-deployment.yaml
    - kubectl apply -f kube/dev/database/refdata-database-deployment.yaml --record
    - kubectl rollout status -f kube/dev/database/refdata-database-deployment.yaml
    - kubectl get all,ing 


deploy:
  stage: deploy
  image: dtzar/helm-kubectl:2.13.0
  script:
    - source ${MOUNT_POINT}/datetime.env
    - echo ${NOW}
    #
    - kubectl config set-cluster local --server="${KUBERNETES_ENDPOINT}"
    - kubectl config set clusters.local.certificate-authority-data "${KUBERNETES_CERTIFICATE_AUTHORITY_DATA}"
    - kubectl config set-credentials ${KUBERNETES_USER} --token="${KUBERNETES_USER_TOKEN}"
    - kubectl config set-context "${KUBERNETES_NAMESPACE}" --cluster=local --user=${KUBERNETES_USER} --namespace="${KUBERNETES_NAMESPACE}"
    - kubectl config use-context "${KUBERNETES_NAMESPACE}"
    - kubectl version
    #
    - sed -i "s/latest/${NOW}/g" kube/production/database/refdata-database-deployment.yaml
    - kubectl apply -f kube/production/database/refdata-database-deployment.yaml --record
    - kubectl rollout status -f kube/production/database/refdata-database-deployment.yaml
    - kubectl get all,ing 

